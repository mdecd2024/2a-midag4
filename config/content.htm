<h1>About</h1>
<p>網頁: <a href="https://mdecd2024.github.io/2a-midag4/content">https://mdecd2024.github.io/2a-midag4/content</a></p>
<p>網誌: <a href="https://mdecd2024.github.io/2a-midag4/blog">https://mdecd2024.github.io/2a-midag4/blog</a></p>
<p>簡報: <a href="https://mdecd2024.github.io/2a-midag4/reveal">https://mdecd2024.github.io/2a-midag4/reveal</a></p>
<p>倉儲: <a href="https://github.com/mdecd2024/2a-midag4">https://github.com/mdecd2024/2a-midag4</a></p>
<p>本 cmsimde 網際內容管理系統的對應 Template 倉儲:</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a></p>
<p style="padding-left: 30px;">此 Template 將 cmsimde 作為子目錄而非子模組, 使用者可以依照需求自行修改</p>
<p style="padding-left: 30px;">倉儲對應網站: <a href="https://mde.tw/cmsimde_site">https://mde.tw/cmsimde_site</a></p>
<h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<h1>Latax翻譯影片重點整理</h1>
<p><span>摘要:</span><br/><br/><span>積分控制器的輸出信號可消除穩態誤差，但可能導致系統響應惡化。</span><wbr/><span>積分項的輸出信號定義為</span><br/><span>方程式。系統需線性化以處理非線性問題。</span><wbr/><span>PID控制器的調整過程包括使用初始值、</span><wbr/><span>調整KD值以獲得適當的增益值。</span><br/><br/><span>結論:</span><br/><br/><span>涉及控制系統中的積分控制、</span><wbr/><span>系統線性化和PID控制器的調整穩定自然不穩定或半穩定系統的</span><br/><span>性能限制在於需要對狀態進行調整，這與理論期望有所不同。</span><wbr/><span>控制器的設計和輸入是穩定系統</span><br/><span>的限制因素，需要考慮調整狀態、控制器設計和輸入。</span><br/><span>對於球平衡平台，調整狀態是通過伺服馬達實現的，</span><wbr/><span>控制器依賴於輸入，而輸入可以是各種參</span><br/><span>數如溫度、壓力、速度等。</span><br/><br/><span># 論文二：A real time control system for balancing a ball on a platform with FPGA parallel implementation</span><br/><br/><span>摘要:</span><br/><br/><span>提出了一個基於PID調節器的新解決方案，</span><wbr/><span>用於實時平衡平台上球的位置調節。通過FPGA實</span><br/><span>現PID調節器，提高了對球位置調節的準確性。</span><wbr/><span>使用平行計算在FPGA上實現PID調節器，提高</span><br/><span>系統速度和功率，</span><wbr/><span>通過自然模擬證實了在平台上平衡球位置的準確性。</span><br/><br/><span>結論</span><br/><br/><span>提出了基於PID調節器的新解決方案，</span><wbr/><span>用於實時平衡平台上球的位置調節。通過自然模擬證實</span><br/><span>了在平台上調節球位置的增加準確性，</span><wbr/><span>這些設計可用於實時控制具有多個受控參數的高速物</span><br/><span>體。</span><br/><br/><span># 論文三：Simulation and Experimental Study of Ball Position Control at Biaxial Platform using State Space Approach</span><br/><br/><span>摘要:</span><br/><br/><span>本文介紹了在平板上平衡球的控制策略。通過三種穩定結構：</span><wbr/><span>PD控制器、全狀態反饋和狀態</span><br/><span>觀測器與狀態反饋。使用Kinetis K60數字信號控制器進行實驗驗證，</span><wbr/><span>通過線性化策略實現系統穩定，三種結構均使用極點配置方法設。</span><wbr/><span>通過實驗和模擬比較結果，展示了最佳結構的性能，</span><wbr/><span>這些控制策略對於平衡球在平板上的穩定具有重要意義。</span><br/><br/><span>結論:</span><br/><br/><span>本文介紹了在平板上平衡球的控制策略，</span><wbr/><span>通過三種穩定結構的實驗驗證和比較，展示了最佳結</span><br/><span>構的性能。並且通過線性化策略實現系統的穩定。</span><wbr/><span>通過實驗和模擬比較結果，證明了控制器能</span><br/><span>夠實現預期的目標，並且能夠追踪球的位置。</span><br/><br/><span># 論文四：Design and Implementation a Ball Balancing System for Control Theory Course</span><br/><br/><span>摘要:</span><br/><br/><span>設計目的：開發一個球平衡系統，用於控制理論課程，</span><wbr/><span>學生可學習PID控制基礎。</span><br/><span>原型：三個原型比較，最終模型使用木材，3D打印，</span><wbr/><span>Arduino控制。</span><br/><span>控制算法：使用PID控制，實時調整梁角度以保持球平衡。</span><br/><span>MATLAB實時數據：</span><wbr/><span>介面程式可在MATLAB中繪製球位置曲線。</span><br/><span>實驗：不同球體實驗結果，PID係數調整。</span><br/><br/><span>結論:</span><br/><br/><span>球平衡系統旨在教育控制理論應用，讓學生應用PID控制原則。</span><wbr/><span>該系統涉及經典控制系統組</span><br/><span>件，並作為閉環反饋理論的實踐平台。總的來說，</span><wbr/><span>梁上的球系統有效展示了反饋控制算法。</span><br/><br/><span># 論文五：Ball on the plate balancing control system</span><br/><br/><span>摘要:</span><br/><br/><span>本文描述了一個球平衡實驗室測試台的設計，</span><wbr/><span>使用步進馬達和位置傳感器來改變平台傾斜角度。</span><wbr/><span>控制系統包括PID控制器，</span><br/><span>。實驗結果表明控制系統能夠成功維持球的位置穩定。</span><br/><br/><span>結論:</span><br/><br/><span>本文描述了一個球平衡實驗室測試台的設計，</span><wbr/><span>可用於測試穩定和平衡控制算法，</span><br/><span>。使用AVR微控制器的控制系統追蹤球在電阻觸摸屏上的位置，</span><wbr/><span>並計算位置誤差，即球相對於</span><br/><span>電阻玻璃中心點的位移。</span><br/><span>此實驗室測試台配備了步進馬達和位置傳感器，</span><wbr/><span>以改變平台的傾斜角度，並具有PID控制器，</span><br/><span>能夠維持球在電阻屏幕中心點。</span><br/><br/><span># 論文六：2D Ball Balancer Control using QUARC</span><br/><br/><span>摘要:</span><br/><br/><span>使用頭頂攝影機讀取球的位置，</span><wbr/><span>控制器可檢測球的位置並輸出平面位置，考慮內迴路控制器設</span><br/><span>計、模擬PID步階響應、調整伺服負載齒輪以保持球的位置、</span><wbr/><span>設置步階振幅並觀察反應。這份</span><br/><span>教師手冊涵蓋了2D Ball Balancer實驗室的相關內容，包括模型建立、</span><wbr/><span>控制器設計和實驗操作。</span><br/><br/><span>結論:</span><br/><br/><span>通過調整風扇參數，可以滿足穩態誤差、定態時間和超調量規格。</span><wbr/><span>伺服角度在30.0度限制內，並且風扇參數調整良好，</span><wbr/><span>不會導致不穩定或不良影響。X-</span><wbr/><span>Y圖表顯示預期和模擬位置幾乎完全重合，</span><wbr/><span>並且在實際設備中兩個軸之間存在一定的耦合。</span></p>
<h1>小組影片</h1>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123102_nfu_edu_tw/EmRddc_QWJBLlXjiOJgSafwBw3ipU3oiAQO1ORee8IIKQg?e=X1bTEK">41123102 上課影片製作</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123111_nfu_edu_tw/EpsWlHkjvoxGlOaX32cYnCsBGkdwgqy0a8rl0cowQUObOw?e=cWseB6">41123111 上課影片製作</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123114_nfu_edu_tw/EpNZFtXY3FNKq_a4F6j_RLwBVR-9iPh8OTmJDLxzpJhmsQ?e=GjEXrK">41123114 上課影片製作</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123117_nfu_edu_tw/Eu8vQIGG4M1DuGz1Jw9wwDsBN2SRVHUzLLsE-Ed1CffYpg">41123117 上課影片製作</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123126_nfu_edu_tw/EljFLaCM8nhHjCTspCFS5NkBpXOD6iZn_NjNOrFsvgeIkw?e=WC1ZyW">41123126 上課影片製作</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123128_nfu_edu_tw/Ep7IgNHYIiJCmkJ3P3MOi0ABLppjRJIhb8v1Ztrx_Yez2g?e=FXyMek">41123128 上課影片製作</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/personal/41123115_nfu_edu_tw/_layouts/15/onedrive.aspx?id=%2Fpersonal%2F41123115%5Fnfu%5Fedu%5Ftw%2FDocuments%2F%E5%AD%97%E5%B9%95&amp;ga=1">41123115 上課影片製作</a></p>
<p><a href="https://nfuedu-my.sharepoint.com/:v:/g/personal/41123107_nfu_edu_tw/EeZIPaLCs7JHsKGotPAAjfkBk_FgQRGloYe4ze5LSP8uZQ?nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&amp;e=ybXQQZ">41123107 影片字幕製作</a></p>
<h1>期中報告</h1>
<p><span>ppt報告、影片:</span><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123128_nfu_edu_tw/EvYZVNy_wuNHkwKWLt9eSxoBDTvDFyXrGKKUFj-45wY6kQ">期中報告ppt、影片</a></p>
<p><span>檔案(pdf、latex):</span><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123128_nfu_edu_tw/Esq34vnkLZtMiEzeCch79kwBf9PR_u1Tgy6-eVm0892c9w?e=ij768I">期中報告</a></p>
<h2>平衡球零件</h2>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123111_nfu_edu_tw/EuSo65VZCXdBuBo8r_UuHoQBxcIrVMDLBY2hkap6bZuQ4Q?e=xHSxhv">繪圖檔案連結</a></p>
<p>nxopen 使用前要檢查nx裡面的python版本是否正確</p>
<p>老師的詳細教學影片:</p>
<p><a href="https://www.youtube.com/watch?v=Cy3j6n0a9wQ&amp;t=241s">https://www.youtube.com/watch?v=Cy3j6n0a9wQ&amp;t=241s</a></p>
<h1>w12任務</h1>
<div>
<div><span></span></div>
</div>
<p>任務一: <a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123111_nfu_edu_tw/EuSo65VZCXdBuBo8r_UuHoQBxcIrVMDLBY2hkap6bZuQ4Q?e=Z9EEuu">繪圖檔案連結</a></p>
<p>任務二: 將分組倉儲設為評分網站子模組 g4 的子模組指令為:</p>
<p>git submodule add https://github.com/mdecd2024/2a-midag4 g4</p>
<p>任務三: <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/5kPKnJGiilk?si=96_nVHSMRtoJz6op" title="YouTube video player" width="560"></iframe></p>
<h1>odoo 討論</h1>
<p><img alt="" height="360" src="/images/螢幕擷取畫面 2024-06-07 135859.png" width="800"/></p>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123111_nfu_edu_tw/EuSo65VZCXdBuBo8r_UuHoQBxcIrVMDLBY2hkap6bZuQ4Q?e=xHSxhv">繪圖檔案連結</a></p>
<h1>網際綜合球類競賽機器人協同設計與模擬</h1>
<p>零件檔:<a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123128_nfu_edu_tw/EmVVUNxlEvBBjDlbrzvWiWwBC7vF_APGRzbBu_nF3PhBTA?e=tn23X1">新增資料夾</a></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ubWrogi58qc?si=5Y1AMMkVO13AXPnG" title="YouTube video player" width="560"></iframe></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>期末報告</h1>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/vPBc4hudCkg?si=JzG6IVoT-VIsvipD" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://nfuedu-my.sharepoint.com/:f:/g/personal/41123117_nfu_edu_tw/Eo_kat-4B8FPstuYW_IfJkQBqhNbDUY7ZxK6Bn3yEiyydA?e=UGxHZ5">期末報告ppt、影片、latex檔案</a></p><h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>